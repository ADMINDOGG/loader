--DOGHUB
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")

local Library = {}
Library.__index = Library

local Config = {
    WindowSize = UDim2.new(0, 580, 0, 460),
    Colors = {
        Background = Color3.fromRGB(15, 15, 20),
        Secondary = Color3.fromRGB(25, 25, 30),
        Tertiary = Color3.fromRGB(35, 35, 40),
        Accent = Color3.fromRGB(88, 101, 242),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(160, 160, 160),
        TextDarker = Color3.fromRGB(120, 120, 120),
        Success = Color3.fromRGB(67, 181, 129),
        Warning = Color3.fromRGB(255, 193, 7),
        Error = Color3.fromRGB(240, 71, 71),
        Border = Color3.fromRGB(50, 50, 55)
    }
}

local function Create(class, properties)
    local obj = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        obj[prop] = value
    end
    return obj
end

local function Tween(obj, props, time)
    local info = TweenInfo.new(time or 0.2, Enum.EasingStyle.Quad)
    TweenService:Create(obj, info, props):Play()
end

function Library:CreateWindow(options)
    options = options or {}
    local WindowName = options.Name or "DOG HUB"
    local LoadingEnabled = options.LoadingEnabled ~= false
    
    local Window = {
        Tabs = {},
        CurrentTab = nil,
        ScreenGui = nil
    }
    
    if CoreGui:FindFirstChild("DOGHUB_UI") then
        CoreGui:FindFirstChild("DOGHUB_UI"):Destroy()
    end
    
    local ScreenGui = Create("ScreenGui", {
        Name = "DOGHUB_UI",
        Parent = CoreGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    Window.ScreenGui = ScreenGui
    
    local MainFrame = Create("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = Config.Colors.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -290, 0.5, -230),
        Size = Config.WindowSize,
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = MainFrame
    })
    
    local TitleBar = Create("Frame", {
        Name = "TitleBar",
        Parent = MainFrame,
        BackgroundColor3 = Config.Colors.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = TitleBar
    })
    
    Create("Frame", {
        Parent = TitleBar,
        BackgroundColor3 = Config.Colors.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.7, 0),
        Size = UDim2.new(1, 0, 0.3, 0)
    })
    
    local TitleLabel = Create("TextLabel", {
        Name = "Title",
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -80, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = WindowName,
        TextColor3 = Config.Colors.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local CloseButton = Create("TextButton", {
        Name = "CloseButton",
        Parent = TitleBar,
        BackgroundColor3 = Config.Colors.Error,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -30, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Enum.Font.GothamBold,
        Text = "Ã—",
        TextColor3 = Config.Colors.Text,
        TextSize = 12
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = CloseButton
    })
    
    local TabContainer = Create("Frame", {
        Name = "TabContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 50),
        Size = UDim2.new(0, 140, 1, -70)
    })
    
    Create("UIListLayout", {
        Parent = TabContainer,
        Padding = UDim.new(0, 6),
        SortOrder = Enum.SortOrder.LayoutOrder
    })
    
    local ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 160, 0, 50),
        Size = UDim2.new(1, -170, 1, -70)
    })
    
    local StatusBar = Create("Frame", {
        Name = "StatusBar",
        Parent = MainFrame,
        BackgroundColor3 = Config.Colors.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -20),
        Size = UDim2.new(1, 0, 0, 20)
    })
    
    local StatusLabel = Create("TextLabel", {
        Parent = StatusBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 1, 0),
        Font = Enum.Font.Gotham,
        Text = "Ready",
        TextColor3 = Config.Colors.TextDark,
        TextSize = 10,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    if LoadingEnabled then
        local LoadingFrame = Create("Frame", {
            Name = "LoadingFrame",
            Parent = MainFrame,
            BackgroundColor3 = Config.Colors.Background,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 100
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 12),
            Parent = LoadingFrame
        })
        
        local LoadingText = Create("TextLabel", {
            Parent = LoadingFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0.5, -20),
            Size = UDim2.new(1, 0, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = "Loading DOG HUB...",
            TextColor3 = Config.Colors.Text,
            TextSize = 16
        })
        
        spawn(function()
            wait(1)
            Tween(LoadingFrame, {BackgroundTransparency = 1}, 0.3)
            Tween(LoadingText, {TextTransparency = 1}, 0.3)
            wait(0.3)
            LoadingFrame:Destroy()
        end)
    end
    
    local dragging = false
    local dragInput, mousePos, framePos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - mousePos
            MainFrame.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        Tween(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    function Window:CreateTab(options)
        options = options or {}
        local TabName = options.Name or "Tab"
        
        local Tab = {
            Elements = {}
        }
        
        local TabButton = Create("TextButton", {
            Name = "TabButton",
            Parent = TabContainer,
            BackgroundColor3 = Config.Colors.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 35),
            Font = Enum.Font.Gotham,
            Text = TabName,
            TextColor3 = Config.Colors.TextDark,
            TextSize = 12,
            LayoutOrder = #Window.Tabs + 1
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = TabButton
        })
        
        local TabContent = Create("ScrollingFrame", {
            Name = "TabContent",
            Parent = ContentContainer,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Config.Colors.Accent,
            Visible = false
        })
        
        Create("UIListLayout", {
            Parent = TabContent,
            Padding = UDim.new(0, 8),
            SortOrder = Enum.SortOrder.LayoutOrder
        })
        
        if #Window.Tabs == 0 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Config.Colors.Accent
            TabButton.TextColor3 = Config.Colors.Text
            Window.CurrentTab = Tab
        end
        
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                tab.Content.Visible = false
                Tween(tab.Button, {
                    BackgroundColor3 = Config.Colors.Secondary,
                    TextColor3 = Config.Colors.TextDark
                }, 0.2)
            end
            
            TabContent.Visible = true
            Tween(TabButton, {
                BackgroundColor3 = Config.Colors.Accent,
                TextColor3 = Config.Colors.Text
            }, 0.2)
            Window.CurrentTab = Tab
        end)
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        table.insert(Window.Tabs, Tab)
        
        local function UpdateCanvasSize()
            spawn(function()
                wait()
                local contentSize = TabContent.UIListLayout.AbsoluteContentSize.Y
                TabContent.CanvasSize = UDim2.new(0, 0, 0, contentSize + 20)
            end)
        end
        
        function Tab:CreateButton(options)
            options = options or {}
            local ButtonName = options.Name or "Button"
            local Callback = options.Callback or function() end
            
            local Button = Create("TextButton", {
                Name = "Button",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 35),
                Font = Enum.Font.Gotham,
                Text = ButtonName,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Button
            })
            
            Button.MouseButton1Click:Connect(function()
                Tween(Button, {BackgroundColor3 = Config.Colors.Accent}, 0.1)
                spawn(function()
                    wait(0.1)
                    Tween(Button, {BackgroundColor3 = Config.Colors.Secondary}, 0.1)
                end)
                pcall(Callback)
            end)
            
            table.insert(Tab.Elements, Button)
            UpdateCanvasSize()
            return Button
        end
        
        function Tab:CreateToggle(options)
            options = options or {}
            local ToggleName = options.Name or "Toggle"
            local CurrentValue = options.CurrentValue or false
            local Callback = options.Callback or function() end
            
            local ToggleFrame = Create("Frame", {
                Name = "Toggle",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 35),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = ToggleFrame
            })
            
            local ToggleLabel = Create("TextLabel", {
                Parent = ToggleFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 12, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = Enum.Font.Gotham,
                Text = ToggleName,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ToggleButton = Create("TextButton", {
                Parent = ToggleFrame,
                BackgroundColor3 = CurrentValue and Config.Colors.Success or Config.Colors.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -40, 0.5, -8),
                Size = UDim2.new(0, 30, 0, 16),
                Text = ""
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = ToggleButton
            })
            
            local ToggleDot = Create("Frame", {
                Parent = ToggleButton,
                BackgroundColor3 = Config.Colors.Text,
                BorderSizePixel = 0,
                Position = CurrentValue and UDim2.new(1, -12, 0.5, -6) or UDim2.new(0, 2, 0.5, -6),
                Size = UDim2.new(0, 12, 0, 12)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = ToggleDot
            })
            
            local toggled = CurrentValue
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                Tween(ToggleButton, {
                    BackgroundColor3 = toggled and Config.Colors.Success or Config.Colors.Tertiary
                }, 0.2)
                
                Tween(ToggleDot, {
                    Position = toggled and UDim2.new(1, -12, 0.5, -6) or UDim2.new(0, 2, 0.5, -6)
                }, 0.2)
                
                pcall(Callback, toggled)
            end)
            
            table.insert(Tab.Elements, ToggleFrame)
            UpdateCanvasSize()
            
            return {
                SetValue = function(value)
                    toggled = value
                    ToggleButton.BackgroundColor3 = toggled and Config.Colors.Success or Config.Colors.Tertiary
                    ToggleDot.Position = toggled and UDim2.new(1, -12, 0.5, -6) or UDim2.new(0, 2, 0.5, -6)
                end
            }
        end
        
        function Tab:CreateSlider(options)
            options = options or {}
            local SliderName = options.Name or "Slider"
            local Range = options.Range or {0, 100}
            local Increment = options.Increment or 1
            local CurrentValue = options.CurrentValue or Range[1]
            local Callback = options.Callback or function() end
            
            local SliderFrame = Create("Frame", {
                Name = "Slider",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 50),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = SliderFrame
            })
            
            local SliderLabel = Create("TextLabel", {
                Parent = SliderFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 12, 0, 5),
                Size = UDim2.new(1, -60, 0, 18),
                Font = Enum.Font.Gotham,
                Text = SliderName,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ValueLabel = Create("TextLabel", {
                Parent = SliderFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -50, 0, 5),
                Size = UDim2.new(0, 40, 0, 18),
                Font = Enum.Font.GothamBold,
                Text = tostring(CurrentValue),
                TextColor3 = Config.Colors.Accent,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            local SliderTrack = Create("Frame", {
                Parent = SliderFrame,
                BackgroundColor3 = Config.Colors.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 12, 1, -15),
                Size = UDim2.new(1, -24, 0, 5)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 3),
                Parent = SliderTrack
            })
            
            local SliderFill = Create("Frame", {
                Parent = SliderTrack,
                BackgroundColor3 = Config.Colors.Accent,
                BorderSizePixel = 0,
                Size = UDim2.new((CurrentValue - Range[1]) / (Range[2] - Range[1]), 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 3),
                Parent = SliderFill
            })
            
            local SliderKnob = Create("Frame", {
                Parent = SliderTrack,
                BackgroundColor3 = Config.Colors.Text,
                BorderSizePixel = 0,
                Position = UDim2.new((CurrentValue - Range[1]) / (Range[2] - Range[1]), -6, 0.5, -6),
                Size = UDim2.new(0, 12, 0, 12)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = SliderKnob
            })
            
            local dragging = false
            
            local function UpdateSlider(input)
                local percentage = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                local value = math.floor(((Range[2] - Range[1]) * percentage + Range[1]) / Increment + 0.5) * Increment
                value = math.clamp(value, Range[1], Range[2])
                
                CurrentValue = value
                ValueLabel.Text = tostring(value)
                
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderKnob.Position = UDim2.new(percentage, -6, 0.5, -6)
                
                pcall(Callback, value)
            end
            
            SliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    UpdateSlider(input)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    UpdateSlider(input)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            table.insert(Tab.Elements, SliderFrame)
            UpdateCanvasSize()
            
            return {
                SetValue = function(value)
                    CurrentValue = math.clamp(value, Range[1], Range[2])
                    ValueLabel.Text = tostring(CurrentValue)
                    local percentage = (CurrentValue - Range[1]) / (Range[2] - Range[1])
                    SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                    SliderKnob.Position = UDim2.new(percentage, -6, 0.5, -6)
                end
            }
        end
        
        function Tab:CreateDropdown(options)
            options = options or {}
            local DropdownName = options.Name or "Dropdown"
            local Options = options.Options or {"Option 1", "Option 2"}
            local CurrentValue = options.CurrentValue or Options[1]
            local Callback = options.Callback or function() end
            
            local DropdownFrame = Create("Frame", {
                Name = "Dropdown",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 35),
                LayoutOrder = #Tab.Elements + 1,
                ClipsDescendants = true
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = DropdownFrame
            })
            
            local DropdownButton = Create("TextButton", {
                Parent = DropdownFrame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 35),
                Font = Enum.Font.Gotham,
                Text = DropdownName .. ": " .. CurrentValue,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextXOffset = 12
            })
            
            local DropdownIcon = Create("TextLabel", {
                Parent = DropdownFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -30, 0, 0),
                Size = UDim2.new(0, 20, 0, 35),
                Font = Enum.Font.Gotham,
                Text = "â–¼",
                TextColor3 = Config.Colors.TextDark,
                TextSize = 10
            })
            
            local OptionsContainer = Create("Frame", {
                Parent = DropdownFrame,
                BackgroundColor3 = Config.Colors.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 35),
                Size = UDim2.new(1, 0, 0, 0),
                ClipsDescendants = true
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = OptionsContainer
            })
            
            Create("UIListLayout", {
                Parent = OptionsContainer,
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            
            local expanded = false
            
            for i, option in ipairs(Options) do
                local OptionButton = Create("TextButton", {
                    Parent = OptionsContainer,
                    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 25),
                    Font = Enum.Font.Gotham,
                    Text = option,
                    TextColor3 = Config.Colors.Text,
                    TextSize = 12,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextXOffset = 12,
                    LayoutOrder = i
                })
                
                OptionButton.MouseButton1Click:Connect(function()
                    CurrentValue = option
                    DropdownButton.Text = DropdownName .. ": " .. CurrentValue
                    
                    expanded = false
                    Tween(DropdownFrame, {Size = UDim2.new(1, -10, 0, 35)}, 0.2)
                    Tween(OptionsContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                    
                    pcall(Callback, CurrentValue)
                end)
                
                OptionButton.MouseEnter:Connect(function()
                    Tween(OptionButton, {BackgroundTransparency = 0.9}, 0.1)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    Tween(OptionButton, {BackgroundTransparency = 1}, 0.1)
                end)
            end
            
            DropdownButton.MouseButton1Click:Connect(function()
                expanded = not expanded
                if expanded then
                    local optionsHeight = #Options * 25
                    Tween(DropdownFrame, {Size = UDim2.new(1, -10, 0, 35 + optionsHeight)}, 0.2)
                    Tween(OptionsContainer, {Size = UDim2.new(1, 0, 0, optionsHeight)}, 0.2)
                else
                    Tween(DropdownFrame, {Size = UDim2.new(1, -10, 0, 35)}, 0.2)
                    Tween(OptionsContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                end
                UpdateCanvasSize()
            end)
            
            table.insert(Tab.Elements, DropdownFrame)
            UpdateCanvasSize()
            
            return {
                SetValue = function(value)
                    CurrentValue = value
                    DropdownButton.Text = DropdownName .. ": " .. CurrentValue
                end
            }
        end
        
        function Tab:CreateTextBox(options)
            options = options or {}
            local TextBoxName = options.Name or "TextBox"
            local PlaceholderText = options.PlaceholderText or "Enter text..."
            local DefaultValue = options.DefaultValue or ""
            local Callback = options.Callback or function() end
            
            local TextBoxFrame = Create("Frame", {
                Name = "TextBox",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 35),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = TextBoxFrame
            })
            
            local TextBoxLabel = Create("TextLabel", {
                Parent = TextBoxFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 12, 0, 0),
                Size = UDim2.new(0, 100, 1, 0),
                Font = Enum.Font.Gotham,
                Text = TextBoxName,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local TextBox = Create("TextBox", {
                Parent = TextBoxFrame,
                BackgroundColor3 = Config.Colors.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 120, 0.5, -10),
                Size = UDim2.new(1, -130, 0, 20),
                Font = Enum.Font.Gotham,
                PlaceholderText = PlaceholderText,
                PlaceholderColor3 = Config.Colors.TextDarker,
                Text = DefaultValue,
                TextColor3 = Config.Colors.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextXOffset = 8
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = TextBox
            })
            
            TextBox.FocusLost:Connect(function()
                pcall(Callback, TextBox.Text)
            end)
            
            table.insert(Tab.Elements, TextBoxFrame)
            UpdateCanvasSize()
            
            return {
                SetValue = function(value)
                    TextBox.Text = value
                end,
                GetValue = function()
                    return TextBox.Text
                end
            }
        end
        
        function Tab:CreateKeybind(options)
            options = options or {}
            local KeybindName = options.Name or "Keybind"
            local DefaultKey = options.DefaultKey or Enum.KeyCode.E
            local Callback = options.Callback or function() end
            
            local KeybindFrame = Create("Frame", {
                Name = "Keybind",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 35),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = KeybindFrame
            })
            
            local KeybindLabel = Create("TextLabel", {
                Parent = KeybindFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 12, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.Gotham,
                Text = KeybindName,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local KeybindButton = Create("TextButton", {
                Parent = KeybindFrame,
                BackgroundColor3 = Config.Colors.Tertiary,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -60, 0.5, -10),
                Size = UDim2.new(0, 50, 0, 20),
                Font = Enum.Font.Gotham,
                Text = DefaultKey.Name,
                TextColor3 = Config.Colors.Text,
                TextSize = 11
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = KeybindButton
            })
            
            local currentKey = DefaultKey
            local binding = false
            
            KeybindButton.MouseButton1Click:Connect(function()
                binding = true
                KeybindButton.Text = "..."
                KeybindButton.BackgroundColor3 = Config.Colors.Accent
            end)
            
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if binding then
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        currentKey = input.KeyCode
                        KeybindButton.Text = currentKey.Name
                        KeybindButton.BackgroundColor3 = Config.Colors.Tertiary
                        binding = false
                    end
                elseif input.KeyCode == currentKey and not gameProcessed then
                    pcall(Callback)
                end
            end)
            
            table.insert(Tab.Elements, KeybindFrame)
            UpdateCanvasSize()
            
            return {
                SetKey = function(key)
                    currentKey = key
                    KeybindButton.Text = currentKey.Name
                end
            }
        end
        
        function Tab:CreateColorPicker(options)
            options = options or {}
            local ColorPickerName = options.Name or "Color Picker"
            local DefaultColor = options.DefaultColor or Color3.fromRGB(255, 255, 255)
            local Callback = options.Callback or function() end
            
            local ColorPickerFrame = Create("Frame", {
                Name = "ColorPicker",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 35),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = ColorPickerFrame
            })
            
            local ColorPickerLabel = Create("TextLabel", {
                Parent = ColorPickerFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 12, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = Enum.Font.Gotham,
                Text = ColorPickerName,
                TextColor3 = Config.Colors.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ColorDisplay = Create("Frame", {
                Parent = ColorPickerFrame,
                BackgroundColor3 = DefaultColor,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -35, 0.5, -8),
                Size = UDim2.new(0, 25, 0, 16)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ColorDisplay
            })
            
            local ColorButton = Create("TextButton", {
                Parent = ColorDisplay,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Text = ""
            })
            
            local currentColor = DefaultColor
            
            ColorButton.MouseButton1Click:Connect(function()
                local r = math.random(0, 255)
                local g = math.random(0, 255)
                local b = math.random(0, 255)
                currentColor = Color3.fromRGB(r, g, b)
                ColorDisplay.BackgroundColor3 = currentColor
                pcall(Callback, currentColor)
            end)
            
            table.insert(Tab.Elements, ColorPickerFrame)
            UpdateCanvasSize()
            
            return {
                SetColor = function(color)
                    currentColor = color
                    ColorDisplay.BackgroundColor3 = currentColor
                end
            }
        end
        
        function Tab:CreateLabel(options)
            options = options or {}
            local LabelText = options.Text or "Label"
            local LabelColor = options.Color or Config.Colors.Text
            
            local Label = Create("TextLabel", {
                Name = "Label",
                Parent = TabContent,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -10, 0, 25),
                Font = Enum.Font.Gotham,
                Text = LabelText,
                TextColor3 = LabelColor,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextXOffset = 12,
                LayoutOrder = #Tab.Elements + 1
            })
            
            table.insert(Tab.Elements, Label)
            UpdateCanvasSize()
            
            return {
                SetText = function(text)
                    Label.Text = text
                end,
                SetColor = function(color)
                    Label.TextColor3 = color
                end
            }
        end
        
        function Tab:CreateSeparator()
            local Separator = Create("Frame", {
                Name = "Separator",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Border,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -20, 0, 1),
                Position = UDim2.new(0, 10, 0, 0),
                LayoutOrder = #Tab.Elements + 1
            })
            
            table.insert(Tab.Elements, Separator)
            UpdateCanvasSize()
            
            return Separator
        end
        
        function Tab:CreateSection(options)
            options = options or {}
            local SectionName = options.Name or "Section"
            
            local SectionFrame = Create("Frame", {
                Name = "Section",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Tertiary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 30),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = SectionFrame
            })
            
            local SectionLabel = Create("TextLabel", {
                Parent = SectionFrame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = SectionName,
                TextColor3 = Config.Colors.Accent,
                TextSize = 14
            })
            
            table.insert(Tab.Elements, SectionFrame)
            UpdateCanvasSize()
            
            return SectionFrame
        end
        
        return Tab
    end
    
    function Window:Notify(options)
        options = options or {}
        local Title = options.Title or "Notification"
        local Content = options.Content or "This is a notification"
        local Duration = options.Duration or 3
        
        local NotificationFrame = Create("Frame", {
            Parent = Window.ScreenGui,
            BackgroundColor3 = Config.Colors.Secondary,
            BorderSizePixel = 0,
            Position = UDim2.new(1, 20, 0, 20),
            Size = UDim2.new(0, 300, 0, 80),
            ZIndex = 1000
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = NotificationFrame
        })
        
        local NotificationTitle = Create("TextLabel", {
            Parent = NotificationFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 5),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = Title,
            TextColor3 = Config.Colors.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local NotificationContent = Create("TextLabel", {
            Parent = NotificationFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 25),
            Size = UDim2.new(1, -30, 1, -30),
            Font = Enum.Font.Gotham,
            Text = Content,
            TextColor3 = Config.Colors.TextDark,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true
        })
        
        Tween(NotificationFrame, {Position = UDim2.new(1, -320, 0, 20)}, 0.3)
        
        spawn(function()
            wait(Duration)
            Tween(NotificationFrame, {Position = UDim2.new(1, 20, 0, 20)}, 0.3)
            wait(0.3)
            NotificationFrame:Destroy()
        end)
    end
    
    function Window:SetStatus(text)
        StatusLabel.Text = text or "Ready"
    end
    
    return Window
end

return Library

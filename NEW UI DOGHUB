-- DOG HUB UI Library - Working Version
-- เวอร์ชันที่ใช้งานได้จริง

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")

local Library = {}
Library.__index = Library

-- สีและการตั้งค่า
local Config = {
    WindowSize = UDim2.new(0, 550, 0, 400),
    Colors = {
        Background = Color3.fromRGB(20, 20, 25),
        Secondary = Color3.fromRGB(30, 30, 35),
        Accent = Color3.fromRGB(88, 101, 242),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(170, 170, 170),
        Success = Color3.fromRGB(67, 181, 129),
        Error = Color3.fromRGB(240, 71, 71)
    }
}

-- ฟังก์ชันสร้าง Instance
local function Create(class, properties)
    local obj = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        obj[prop] = value
    end
    return obj
end

-- ฟังก์ชัน Tween
local function Tween(obj, props, time)
    local info = TweenInfo.new(time or 0.2, Enum.EasingStyle.Quad)
    TweenService:Create(obj, info, props):Play()
end

function Library:CreateWindow(options)
    options = options or {}
    local WindowName = options.Name or "DOG HUB"
    local LoadingEnabled = options.LoadingEnabled ~= false
    
    local Window = {
        Tabs = {},
        CurrentTab = nil
    }
    
    -- ลบ UI เดิม (ถ้ามี)
    if CoreGui:FindFirstChild("DOGHUB_UI") then
        CoreGui:FindFirstChild("DOGHUB_UI"):Destroy()
    end
    
    -- สร้าง ScreenGui
    local ScreenGui = Create("ScreenGui", {
        Name = "DOGHUB_UI",
        Parent = CoreGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Main Frame
    local MainFrame = Create("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = Config.Colors.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -275, 0.5, -200),
        Size = Config.WindowSize,
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = MainFrame
    })
    
    -- Title Bar
    local TitleBar = Create("Frame", {
        Name = "TitleBar",
        Parent = MainFrame,
        BackgroundColor3 = Config.Colors.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 35)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = TitleBar
    })
    
    -- ซ่อนมุมล่าง
    Create("Frame", {
        Parent = TitleBar,
        BackgroundColor3 = Config.Colors.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.7, 0),
        Size = UDim2.new(1, 0, 0.3, 0)
    })
    
    -- Title Text
    local TitleLabel = Create("TextLabel", {
        Name = "Title",
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -50, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = WindowName,
        TextColor3 = Config.Colors.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Close Button
    local CloseButton = Create("TextButton", {
        Name = "CloseButton",
        Parent = TitleBar,
        BackgroundColor3 = Config.Colors.Error,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -30, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Config.Colors.Text,
        TextSize = 12
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = CloseButton
    })
    
    -- Tab Container
    local TabContainer = Create("Frame", {
        Name = "TabContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 45),
        Size = UDim2.new(0, 130, 1, -55)
    })
    
    Create("UIListLayout", {
        Parent = TabContainer,
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder
    })
    
    -- Content Container
    local ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 150, 0, 45),
        Size = UDim2.new(1, -160, 1, -55)
    })
    
    -- Loading Screen
    if LoadingEnabled then
        local LoadingFrame = Create("Frame", {
            Name = "LoadingFrame",
            Parent = MainFrame,
            BackgroundColor3 = Config.Colors.Background,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 100
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 10),
            Parent = LoadingFrame
        })
        
        local LoadingText = Create("TextLabel", {
            Parent = LoadingFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0.5, -10),
            Size = UDim2.new(1, 0, 0, 20),
            Font = Enum.Font.Gotham,
            Text = "กำลังโหลด DOG HUB...",
            TextColor3 = Config.Colors.Text,
            TextSize = 14
        })
        
        -- Loading Animation
        spawn(function()
            for i = 1, 3 do
                LoadingText.Text = "กำลังโหลด DOG HUB" .. string.rep(".", i)
                wait(0.5)
            end
            Tween(LoadingFrame, {BackgroundTransparency = 1}, 0.3)
            Tween(LoadingText, {TextTransparency = 1}, 0.3)
            wait(0.3)
            LoadingFrame:Destroy()
        end)
    end
    
    -- Dragging
    local dragging = false
    local dragInput, mousePos, framePos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - mousePos
            MainFrame.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Close Button
    CloseButton.MouseButton1Click:Connect(function()
        Tween(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Tab Functions
    function Window:CreateTab(options)
        options = options or {}
        local TabName = options.Name or "Tab"
        
        local Tab = {
            Elements = {}
        }
        
        -- Tab Button
        local TabButton = Create("TextButton", {
            Name = "TabButton",
            Parent = TabContainer,
            BackgroundColor3 = Config.Colors.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 30),
            Font = Enum.Font.Gotham,
            Text = TabName,
            TextColor3 = Config.Colors.TextDark,
            TextSize = 12,
            LayoutOrder = #Window.Tabs + 1
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 5),
            Parent = TabButton
        })
        
        -- Tab Content
        local TabContent = Create("ScrollingFrame", {
            Name = "TabContent",
            Parent = ContentContainer,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Config.Colors.Accent,
            Visible = false
        })
        
        Create("UIListLayout", {
            Parent = TabContent,
            Padding = UDim.new(0, 8),
            SortOrder = Enum.SortOrder.LayoutOrder
        })
        
        -- Auto-select first tab
        if #Window.Tabs == 0 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Config.Colors.Accent
            TabButton.TextColor3 = Config.Colors.Text
            Window.CurrentTab = Tab
        end
        
        -- Tab Selection
        TabButton.MouseButton1Click:Connect(function()
            -- Hide all tabs
            for _, tab in pairs(Window.Tabs) do
                tab.Content.Visible = false
                Tween(tab.Button, {
                    BackgroundColor3 = Config.Colors.Secondary,
                    TextColor3 = Config.Colors.TextDark
                }, 0.2)
            end
            
            -- Show selected tab
            TabContent.Visible = true
            Tween(TabButton, {
                BackgroundColor3 = Config.Colors.Accent,
                TextColor3 = Config.Colors.Text
            }, 0.2)
            Window.CurrentTab = Tab
        end)
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        table.insert(Window.Tabs, Tab)
        
        -- Update canvas size function
        local function UpdateCanvasSize()
            local contentSize = TabContent.UIListLayout.AbsoluteContentSize.Y
            TabContent.CanvasSize = UDim2.new(0, 0, 0, contentSize + 20)
        end
        
        -- Element Creation Functions
        function Tab:CreateButton(options)
            options = options or {}
            local ButtonName = options.Name or "Button"
            local Callback = options.Callback or function() end
            
            local Button = Create("TextButton", {
                Name = "Button",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 32),
                Font = Enum.Font.Gotham,
                Text = ButtonName,
                TextColor3 = Config.Colors.Text,
                TextSize = 12,
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 5),
                Parent = Button
            })
            
            Button.MouseButton1Click:Connect(function()
                Tween(Button, {BackgroundColor3 = Config.Colors.Accent}, 0.1)
                spawn(function()
                    wait(0.1)
                    Tween(Button, {BackgroundColor3 = Config.Colors.Secondary}, 0.1)
                end)
                pcall(Callback)
            end)
            
            table.insert(Tab.Elements, Button)
            UpdateCanvasSize()
            return Button
        end
        
        function Tab:CreateToggle(options)
            options = options or {}
            local ToggleName = options.Name or "Toggle"
            local CurrentValue = options.CurrentValue or false
            local Callback = options.Callback or function() end
            
            local ToggleFrame = Create("Frame", {
                Name = "Toggle",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 32),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 5),
                Parent = ToggleFrame
            })
            
            local ToggleLabel = Create("TextLabel", {
                Parent = ToggleFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = Enum.Font.Gotham,
                Text = ToggleName,
                TextColor3 = Config.Colors.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ToggleButton = Create("TextButton", {
                Parent = ToggleFrame,
                BackgroundColor3 = CurrentValue and Config.Colors.Success or Color3.fromRGB(60, 60, 65),
                BorderSizePixel = 0,
                Position = UDim2.new(1, -35, 0.5, -6),
                Size = UDim2.new(0, 25, 0, 12),
                Text = ""
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = ToggleButton
            })
            
            local ToggleDot = Create("Frame", {
                Parent = ToggleButton,
                BackgroundColor3 = Config.Colors.Text,
                BorderSizePixel = 0,
                Position = CurrentValue and UDim2.new(1, -10, 0.5, -4) or UDim2.new(0, 2, 0.5, -4),
                Size = UDim2.new(0, 8, 0, 8)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = ToggleDot
            })
            
            local toggled = CurrentValue
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                Tween(ToggleButton, {
                    BackgroundColor3 = toggled and Config.Colors.Success or Color3.fromRGB(60, 60, 65)
                }, 0.2)
                
                Tween(ToggleDot, {
                    Position = toggled and UDim2.new(1, -10, 0.5, -4) or UDim2.new(0, 2, 0.5, -4)
                }, 0.2)
                
                pcall(Callback, toggled)
            end)
            
            table.insert(Tab.Elements, ToggleFrame)
            UpdateCanvasSize()
            
            return {
                SetValue = function(value)
                    toggled = value
                    ToggleButton.BackgroundColor3 = toggled and Config.Colors.Success or Color3.fromRGB(60, 60, 65)
                    ToggleDot.Position = toggled and UDim2.new(1, -10, 0.5, -4) or UDim2.new(0, 2, 0.5, -4)
                end
            }
        end
        
        function Tab:CreateSlider(options)
            options = options or {}
            local SliderName = options.Name or "Slider"
            local Range = options.Range or {0, 100}
            local Increment = options.Increment or 1
            local CurrentValue = options.CurrentValue or Range[1]
            local Callback = options.Callback or function() end
            
            local SliderFrame = Create("Frame", {
                Name = "Slider",
                Parent = TabContent,
                BackgroundColor3 = Config.Colors.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 45),
                LayoutOrder = #Tab.Elements + 1
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 5),
                Parent = SliderFrame
            })
            
            local SliderLabel = Create("TextLabel", {
                Parent = SliderFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 2),
                Size = UDim2.new(1, -60, 0, 15),
                Font = Enum.Font.Gotham,
                Text = SliderName,
                TextColor3 = Config.Colors.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ValueLabel = Create("TextLabel", {
                Parent = SliderFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -50, 0, 2),
                Size = UDim2.new(0, 40, 0, 15),
                Font = Enum.Font.Gotham,
                Text = tostring(CurrentValue),
                TextColor3 = Config.Colors.Accent,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            local SliderTrack = Create("Frame", {
                Parent = SliderFrame,
                BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 10, 1, -12),
                Size = UDim2.new(1, -20, 0, 4)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 2),
                Parent = SliderTrack
            })
            
            local SliderFill = Create("Frame", {
                Parent = SliderTrack,
                BackgroundColor3 = Config.Colors.Accent,
                BorderSizePixel = 0,
                Size = UDim2.new((CurrentValue - Range[1]) / (Range[2] - Range[1]), 0, 1, 0)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 2),
                Parent = SliderFill
            })
            
            local SliderKnob = Create("Frame", {
                Parent = SliderTrack,
                BackgroundColor3 = Config.Colors.Text,
                BorderSizePixel = 0,
                Position = UDim2.new((CurrentValue - Range[1]) / (Range[2] - Range[1]), -4, 0.5, -4),
                Size = UDim2.new(0, 8, 0, 8)
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = SliderKnob
            })
            
            local dragging = false
            
            local function UpdateSlider(input)
                local percentage = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                local value = math.floor(((Range[2] - Range[1]) * percentage + Range[1]) / Increment + 0.5) * Increment
                value = math.clamp(value, Range[1], Range[2])
                
                CurrentValue = value
                ValueLabel.Text = tostring(value)
                
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderKnob.Position = UDim2.new(percentage, -4, 0.5, -4)
                
                pcall(Callback, value)
            end
            
            SliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    UpdateSlider(input)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    UpdateSlider(input)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            table.insert(Tab.Elements, SliderFrame)
            UpdateCanvasSize()
            
            return {
                SetValue = function(value)
                    CurrentValue = math.clamp(value, Range[1], Range[2])
                    ValueLabel.Text = tostring(CurrentValue)
                    local percentage = (CurrentValue - Range[1]) / (Range[2] - Range[1])
                    SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                    SliderKnob.Position = UDim2.new(percentage, -4, 0.5, -4)
                end
            }
        end
        
        return Tab
    end
    
    return Window
end

return Library

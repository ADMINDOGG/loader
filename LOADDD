-- DOGHUB A - Modern UI Library (Inspired by Rayfield)
-- เวอร์ชัน 1.0.0
-- Created with ❤️ for the community

local DOGHUB = {}
DOGHUB.__index = DOGHUB

-- ข้อมูลพื้นฐาน
DOGHUB.Version = "1.0.0"
DOGHUB.Author = "DOGHUB Team"

-- การตั้งค่าเริ่มต้น
local Config = {
    WindowSize = {600, 400},
    WindowPosition = {100, 100},
    Theme = "DarkBlue",
    Transparency = 0.95,
    AnimationSpeed = 0.3,
    ShadowEnabled = true
}

-- ธีมสี
local Themes = {
    DarkBlue = {
        Background = {15, 15, 25, 255},
        Surface = {25, 25, 40, 255},
        Primary = {88, 101, 242, 255},
        Secondary = {114, 137, 218, 255},
        Accent = {255, 105, 180, 255},
        Text = {255, 255, 255, 255},
        TextSecondary = {170, 170, 190, 255},
        Success = {87, 242, 135, 255},
        Warning = {255, 202, 40, 255},
        Error = {237, 66, 69, 255},
        Border = {45, 45, 65, 255),
        Hover = {35, 35, 55, 255}
    },
    
    Purple = {
        Background = {20, 15, 25, 255},
        Surface = {35, 25, 45, 255},
        Primary = {138, 43, 226, 255},
        Secondary = {147, 112, 219, 255},
        Accent = {255, 20, 147, 255},
        Text = {255, 255, 255, 255},
        TextSecondary = {190, 170, 200, 255},
        Success = {50, 205, 50, 255},
        Warning = {255, 215, 0, 255},
        Error = {220, 20, 60, 255},
        Border = {55, 45, 70, 255},
        Hover = {45, 35, 60, 255}
    },
    
    Ocean = {
        Background = {12, 20, 30, 255},
        Surface = {20, 35, 50, 255},
        Primary = {0, 150, 200, 255},
        Secondary = {64, 224, 208, 255},
        Accent = {0, 255, 255, 255},
        Text = {240, 248, 255, 255},
        TextSecondary = {175, 195, 215, 255},
        Success = {0, 255, 127, 255},
        Warning = {255, 165, 0, 255},
        Error = {255, 69, 0, 255},
        Border = {40, 60, 80, 255},
        Hover = {30, 50, 70, 255}
    }
}

-- ตัวแปรสถานะ
local CurrentTheme = Config.Theme
local ActiveWindows = {}
local AnimationQueue = {}
local LastMousePos = {0, 0}

-- ฟังก์ชันยูทิลิตี้
local function getColor(colorName)
    return Themes[CurrentTheme][colorName] or {255, 255, 255, 255}
end

local function lerp(a, b, t)
    return a + (b - a) * t
end

local function lerpColor(color1, color2, t)
    return {
        lerp(color1[1], color2[1], t),
        lerp(color1[2], color2[2], t),
        lerp(color1[3], color2[3], t),
        lerp(color1[4], color2[4], t)
    }
end

local function drawRoundedRect(x, y, w, h, radius, color, shadow)
    if shadow and Config.ShadowEnabled then
        -- วาดเงา
        local shadowColor = {0, 0, 0, 50}
        if love and love.graphics then
            love.graphics.setColor(shadowColor[1]/255, shadowColor[2]/255, shadowColor[3]/255, shadowColor[4]/255)
            love.graphics.rectangle("fill", x + 3, y + 3, w, h, radius, radius)
        end
    end
    
    if love and love.graphics then
        love.graphics.setColor(color[1]/255, color[2]/255, color[3]/255, (color[4] * Config.Transparency)/255)
        love.graphics.rectangle("fill", x, y, w, h, radius, radius)
    end
end

local function drawGradientRect(x, y, w, h, color1, color2, direction)
    direction = direction or "vertical"
    local steps = 20
    
    for i = 0, steps do
        local t = i / steps
        local currentColor = lerpColor(color1, color2, t)
        
        if direction == "vertical" then
            local stepHeight = h / steps
            drawRoundedRect(x, y + i * stepHeight, w, stepHeight, 0, currentColor)
        else
            local stepWidth = w / steps
            drawRoundedRect(x + i * stepWidth, y, stepWidth, h, 0, currentColor)
        end
    end
end

local function isPointInRect(px, py, x, y, w, h)
    return px >= x and px <= x + w and py >= y and py <= y + h
end

-- คลาส Window หลัก
local Window = {}
Window.__index = Window

function Window.new(config)
    local self = setmetatable({}, Window)
    
    -- การตั้งค่าหน้าต่าง
    self.Name = config.Name or "DOGHUB A"
    self.ConfigurationSaving = config.ConfigurationSaving or {Enabled = false}
    self.Discord = config.Discord or {Enabled = false}
    self.KeySystem = config.KeySystem or false
    
    -- ขนาดและตำแหน่ง
    self.Size = config.Size or Config.WindowSize
    self.Position = Config.WindowPosition
    self.Visible = true
    self.Minimized = false
    
    -- สถานะการลาก
    self.Dragging = false
    self.DragOffset = {0, 0}
    
    -- แท็บและเนื้อหา
    self.Tabs = {}
    self.ActiveTab = nil
    self.Elements = {}
    
    -- เอฟเฟกต์
    self.Animation = {
        Scale = 1.0,
        Opacity = 1.0,
        Position = {self.Position[1], self.Position[2]}
    }
    
    table.insert(ActiveWindows, self)
    return self
end

function Window:CreateTab(config)
    local tab = {
        Name = config.Name or "Tab",
        Icon = config.Icon,
        Elements = {},
        Visible = true,
        Position = {10, 80},
        Scroll = 0
    }
    
    table.insert(self.Tabs, tab)
    if not self.ActiveTab then
        self.ActiveTab = tab
    end
    
    return setmetatable(tab, {__index = self:getTabMethods()})
end

function Window:getTabMethods()
    local methods = {}
    
    function methods:CreateButton(config)
        local button = {
            Type = "Button",
            Name = config.Name or "Button",
            Callback = config.Callback or function() end,
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 50},
            Size = {200, 35},
            Style = config.Style or "Primary",
            Enabled = config.Enabled ~= false,
            Hovered = false,
            Pressed = false,
            Animation = {Scale = 1.0, Glow = 0.0}
        }
        
        table.insert(self.Elements, button)
        return button
    end
    
    function methods:CreateToggle(config)
        local toggle = {
            Type = "Toggle",
            Name = config.Name or "Toggle",
            CurrentValue = config.CurrentValue or false,
            Flag = config.Flag,
            Callback = config.Callback or function() end,
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 90},
            Size = {200, 30},
            Enabled = config.Enabled ~= false,
            Animation = {Switch = 0.0, Glow = 0.0}
        }
        
        table.insert(self.Elements, toggle)
        return toggle
    end
    
    function methods:CreateSlider(config)
        local slider = {
            Type = "Slider",
            Name = config.Name or "Slider",
            Range = config.Range or {0, 100},
            Increment = config.Increment or 1,
            Suffix = config.Suffix or "",
            CurrentValue = config.CurrentValue or config.Range[1],
            Flag = config.Flag,
            Callback = config.Callback or function() end,
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 130},
            Size = {200, 40},
            Enabled = config.Enabled ~= false,
            Dragging = false,
            Animation = {Highlight = 0.0}
        }
        
        table.insert(self.Elements, slider)
        return slider
    end
    
    function methods:CreateDropdown(config)
        local dropdown = {
            Type = "Dropdown",
            Name = config.Name or "Dropdown",
            Options = config.Options or {"Option 1", "Option 2"},
            CurrentOption = config.CurrentOption or config.Options[1],
            MultipleOptions = config.MultipleOptions or false,
            Flag = config.Flag,
            Callback = config.Callback or function() end,
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 180},
            Size = {200, 35},
            Enabled = config.Enabled ~= false,
            Opened = false,
            Animation = {Expand = 0.0}
        }
        
        table.insert(self.Elements, dropdown)
        return dropdown
    end
    
    function methods:CreateColorPicker(config)
        local colorpicker = {
            Type = "ColorPicker",
            Name = config.Name or "Color Picker",
            Color = config.Color or {255, 255, 255},
            Flag = config.Flag,
            Callback = config.Callback or function() end,
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 225},
            Size = {200, 35},
            Enabled = config.Enabled ~= false,
            Opened = false,
            HSV = {0, 1, 1}
        }
        
        table.insert(self.Elements, colorpicker)
        return colorpicker
    end
    
    function methods:CreateSection(config)
        local section = {
            Type = "Section",
            Name = config.Name or "Section",
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 270},
            Size = {200, 2}
        }
        
        table.insert(self.Elements, section)
        return section
    end
    
    function methods:CreateLabel(config)
        local label = {
            Type = "Label",
            Text = config.Text or "Label",
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 290},
            Size = {200, 20},
            TextColor = config.TextColor or "Text"
        }
        
        table.insert(self.Elements, label)
        return label
    end
    
    function methods:CreateParagraph(config)
        local paragraph = {
            Type = "Paragraph",
            Title = config.Title or "Title",
            Content = config.Content or "Content goes here...",
            Position = {config.Position and config.Position[1] or 10, config.Position and config.Position[2] or 320},
            Size = {200, 60}
        }
        
        table.insert(self.Elements, paragraph)
        return paragraph
    end
    
    return methods
end

function Window:Draw()
    if not self.Visible then return end
    
    local x, y = self.Position[1], self.Position[2]
    local w, h = self.Size[1], self.Size[2]
    
    -- วาดพื้นหลังหลัก
    local bgColor = getColor("Background")
    drawRoundedRect(x, y, w, h, 12, bgColor, true)
    
    -- วาดแถบหัวเรื่อง
    local titleBarColor = getColor("Surface")
    drawRoundedRect(x, y, w, 50, 12, titleBarColor)
    
    -- วาดเส้นแบ่งใต้ title bar
    local borderColor = getColor("Border")
    if love and love.graphics then
        love.graphics.setColor(borderColor[1]/255, borderColor[2]/255, borderColor[3]/255, borderColor[4]/255)
        love.graphics.rectangle("fill", x, y + 50, w, 1)
    end
    
    -- วาดชื่อหน้าต่าง
    local textColor = getColor("Text")
    if love and love.graphics then
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(16))
        love.graphics.print("🐕 " .. self.Name, x + 15, y + 17)
        
        -- วาดเวอร์ชัน
        love.graphics.setFont(love.graphics.newFont(10))
        local versionColor = getColor("TextSecondary")
        love.graphics.setColor(versionColor[1]/255, versionColor[2]/255, versionColor[3]/255, versionColor[4]/255)
        love.graphics.print("v" .. DOGHUB.Version, x + w - 60, y + 20)
    end
    
    -- วาดปุ่มปิด
    local closeButtonColor = getColor("Error")
    drawRoundedRect(x + w - 35, y + 15, 20, 20, 4, closeButtonColor)
    
    -- วาดแท็บ
    self:DrawTabs()
    
    -- วาดเนื้อหาของแท็บที่เลือก
    if self.ActiveTab then
        self:DrawTabContent(self.ActiveTab)
    end
end

function Window:DrawTabs()
    local x, y = self.Position[1], self.Position[2]
    local tabY = y + 60
    local tabWidth = self.Size[1] / math.max(#self.Tabs, 1)
    
    for i, tab in ipairs(self.Tabs) do
        local tabX = x + (i - 1) * tabWidth
        local isActive = (tab == self.ActiveTab)
        
        local tabColor = isActive and getColor("Primary") or getColor("Surface")
        drawRoundedRect(tabX, tabY, tabWidth, 35, 6, tabColor)
        
        -- วาดข้อความแท็บ
        local textColor = isActive and getColor("Text") or getColor("TextSecondary")
        if love and love.graphics then
            love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
            love.graphics.setFont(love.graphics.newFont(12))
            
            local textWidth = love.graphics.getFont():getWidth(tab.Name)
            love.graphics.print(tab.Name, tabX + tabWidth/2 - textWidth/2, tabY + 10)
        end
    end
end

function Window:DrawTabContent(tab)
    local x, y = self.Position[1], self.Position[2]
    local contentY = y + 105
    
    for _, element in ipairs(self.Elements) do
        if element.Type == "Button" then
            self:DrawButton(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "Toggle" then
            self:DrawToggle(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "Slider" then
            self:DrawSlider(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "Dropdown" then
            self:DrawDropdown(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "ColorPicker" then
            self:DrawColorPicker(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "Section" then
            self:DrawSection(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "Label" then
            self:DrawLabel(element, x + element.Position[1], contentY + element.Position[2])
        elseif element.Type == "Paragraph" then
            self:DrawParagraph(element, x + element.Position[1], contentY + element.Position[2])
        end
    end
end

function Window:DrawButton(button, x, y)
    local color = getColor(button.Style)
    if button.Pressed then
        color = lerpColor(color, {0, 0, 0, 255}, 0.3)
    elseif button.Hovered then
        color = lerpColor(color, {255, 255, 255, 255}, 0.1)
    end
    
    drawRoundedRect(x, y, button.Size[1], button.Size[2], 8, color, true)
    
    -- วาดข้อความ
    if love and love.graphics then
        love.graphics.setColor(1, 1, 1, 1)
        love.graphics.setFont(love.graphics.newFont(14))
        local textWidth = love.graphics.getFont():getWidth(button.Name)
        love.graphics.print(button.Name, x + button.Size[1]/2 - textWidth/2, y + button.Size[2]/2 - 7)
    end
end

function Window:DrawToggle(toggle, x, y)
    -- วาดพื้นหลัง
    local bgColor = getColor("Surface")
    drawRoundedRect(x, y, toggle.Size[1], toggle.Size[2], 6, bgColor)
    
    -- วาดชื่อ
    local textColor = getColor("Text")
    if love and love.graphics then
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(12))
        love.graphics.print(toggle.Name, x + 10, y + 8)
    end
    
    -- วาดสวิตช์
    local switchX = x + toggle.Size[1] - 50
    local switchColor = toggle.CurrentValue and getColor("Success") or getColor("Border")
    drawRoundedRect(switchX, y + 5, 40, 20, 10, switchColor)
    
    -- วาดจุดสวิตช์
    local dotX = toggle.CurrentValue and switchX + 22 or switchX + 2
    local dotColor = getColor("Text")
    drawRoundedRect(dotX, y + 7, 16, 16, 8, dotColor)
end

function Window:DrawSlider(slider, x, y)
    -- วาดพื้นหลัง
    local bgColor = getColor("Surface")
    drawRoundedRect(x, y, slider.Size[1], slider.Size[2], 6, bgColor)
    
    -- วาดชื่อและค่า
    local textColor = getColor("Text")
    if love and love.graphics then
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(12))
        love.graphics.print(slider.Name, x + 10, y + 5)
        love.graphics.print(tostring(slider.CurrentValue) .. slider.Suffix, x + slider.Size[1] - 50, y + 5)
    end
    
    -- วาดแทร็กสไลเดอร์
    local trackY = y + 25
    local trackColor = getColor("Border")
    drawRoundedRect(x + 10, trackY, slider.Size[1] - 20, 6, 3, trackColor)
    
    -- วาดแทร็กที่เติม
    local fillPercentage = (slider.CurrentValue - slider.Range[1]) / (slider.Range[2] - slider.Range[1])
    local fillWidth = (slider.Size[1] - 20) * fillPercentage
    local fillColor = getColor("Primary")
    drawRoundedRect(x + 10, trackY, fillWidth, 6, 3, fillColor)
    
    -- วาดหัวสไลเดอร์
    local thumbX = x + 10 + fillWidth - 8
    local thumbColor = getColor("Text")
    drawRoundedRect(thumbX, trackY - 4, 16, 14, 7, thumbColor, true)
end

function Window:DrawDropdown(dropdown, x, y)
    local bgColor = getColor("Surface")
    drawRoundedRect(x, y, dropdown.Size[1], dropdown.Size[2], 6, bgColor, true)
    
    -- วาดข้อความ
    local textColor = getColor("Text")
    if love and love.graphics then
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(12))
        love.graphics.print(dropdown.Name .. ": " .. dropdown.CurrentOption, x + 10, y + 10)
    end
    
    -- วาดลูกศรลง
    local arrowColor = getColor("TextSecondary")
    if love and love.graphics then
        love.graphics.setColor(arrowColor[1]/255, arrowColor[2]/255, arrowColor[3]/255, arrowColor[4]/255)
        love.graphics.print("▼", x + dropdown.Size[1] - 25, y + 10)
    end
end

function Window:DrawColorPicker(colorpicker, x, y)
    local bgColor = getColor("Surface")
    drawRoundedRect(x, y, colorpicker.Size[1], colorpicker.Size[2], 6, bgColor, true)
    
    -- วาดชื่อ
    local textColor = getColor("Text")
    if love and love.graphics then
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(12))
        love.graphics.print(colorpicker.Name, x + 10, y + 10)
    end
    
    -- วาดสีที่เลือก
    drawRoundedRect(x + colorpicker.Size[1] - 35, y + 5, 25, 25, 4, colorpicker.Color)
end

function Window:DrawSection(section, x, y)
    local lineColor = getColor("Border")
    if love and love.graphics then
        love.graphics.setColor(lineColor[1]/255, lineColor[2]/255, lineColor[3]/255, lineColor[4]/255)
        love.graphics.rectangle("fill", x, y, section.Size[1], section.Size[2])
    end
end

function Window:DrawLabel(label, x, y)
    local textColor = getColor(label.TextColor)
    if love and love.graphics then
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(12))
        love.graphics.print(label.Text, x, y)
    end
end

function Window:DrawParagraph(paragraph, x, y)
    local bgColor = getColor("Surface")
    drawRoundedRect(x, y, paragraph.Size[1], paragraph.Size[2], 6, bgColor)
    
    local textColor = getColor("Text")
    local secondaryColor = getColor("TextSecondary")
    
    if love and love.graphics then
        -- วาดหัวเรื่อง
        love.graphics.setColor(textColor[1]/255, textColor[2]/255, textColor[3]/255, textColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(14))
        love.graphics.print(paragraph.Title, x + 10, y + 5)
        
        -- วาดเนื้อหา
        love.graphics.setColor(secondaryColor[1]/255, secondaryColor[2]/255, secondaryColor[3]/255, secondaryColor[4]/255)
        love.graphics.setFont(love.graphics.newFont(10))
        love.graphics.printf(paragraph.Content, x + 10, y + 25, paragraph.Size[1] - 20, "left")
    end
end

-- Event Handling
function Window:HandleMousePressed(mx, my, button)
    if not self.Visible then return false end
    
    local x, y = self.Position[1], self.Position[2]
    local w, h = self.Size[1], self.Size[2]
    
    -- ตรวจสอบการคลิกที่ title bar
    if isPointInRect(mx, my, x, y, w, 50) then
        -- ตรวจสอบปุ่มปิด
        if isPointInRect(mx, my, x + w - 35, y + 15, 20, 20) then
            self:Destroy()
            return true
        end
        
        self.Dragging = true
        self.DragOffset = {mx - x, my - y}
        return true
    end
    
    -- ตรวจสอบการคลิกที่แท็บ
    local tabY = y + 60
    local tabWidth = w / math.max(#self.Tabs, 1)
    for i, tab in ipairs(self.Tabs) do
        local tabX = x + (i - 1) * tabWidth
        if isPointInRect(mx, my, tabX, tabY, tabWidth, 35) then
            self.ActiveTab = tab
            return true
        end
    end
    
    -- ตรวจสอบการคลิกที่องค์ประกอบ
    local contentY = y + 105
    for _, element in ipairs(self.Elements) do
        local elemX = x + element.Position[1]
        local elemY = contentY + element.Position[2]
        
        if element.Type == "Button" then
            if isPointInRect(mx, my, elemX, elemY, element.Size[1], element.Size[2]) then
                element.Pressed = true
                element.Callback()
                return true
            end
        elseif element.Type == "Toggle" then
            if isPointInRect(mx, my, elemX, elemY, element.Size[1], element.Size[2]) then
                element.CurrentValue = not element.CurrentValue
                element.Callback(element.CurrentValue)
                return true
            end
        end
    end
    
    return false
end

function Window:HandleMouseReleased(mx, my, button)
    self.Dragging = false
    
    for _, element in ipairs(self.Elements) do
        if element.Type == "Button" then
            element.Pressed = false
        end
    end
end

function Window:HandleMouseMoved(mx, my)
    if self.Dragging then
        self.Position[1] = mx - self.DragOffset[1]
        self.Position[2] = my - self.DragOffset[2]
    end
    
    LastMousePos = {mx, my}
    
    -- อัพเดท hover states
    local x, y = self.Position[1], self.Position[2]
    local contentY = y + 105
    
    for _, element in ipairs(self.Elements) do
        local elemX = x + element.Position[1]
        local elemY = contentY + element.Position[2]
        
        if element.Type == "Button" then
            element.Hovered = isPointInRect(mx, my, elemX, elemY, element.Size[1], element.Size[2])
        end
    end
end

function Window:Destroy()
    for i, window in ipairs(ActiveWindows) do
        if window == self then
            table.remove(ActiveWindows, i)
            break
        end
    end
end

-- ฟังก์ชันหลักของ DOGHUB
function DOGHUB:CreateWindow(config)
    return Window.new(config)
end

function DOGHUB:SetTheme(themeName)
    if Themes[themeName] then
        CurrentTheme = themeName
        Config.Theme = themeName
    end
end

function DOGHUB:GetTheme()
    return CurrentTheme
end

function DOGHUB:DrawAll()
    for _, window in ipairs(ActiveWindows) do
        window:Draw()
    end
end

function DOGHUB:HandleMousePressed(x, y, button)
    for i = #ActiveWindows, 1, -1 do
        if ActiveWindows[i]:HandleMousePressed(x, y, button) then
            -- ย้ายหน้าต่างที่ถูกคลิกมาด้านหน้า
            local window = table.remove(ActiveWindows, i)
            table.insert(ActiveWindows, window)
            break
        end
    end
end

function DOGHUB:HandleMouseReleased(x, y, button)
    for _, window in ipairs(ActiveWindows) do
        window:HandleMouseReleased(x, y, button)
    end
end

function DOGHUB:HandleMouseMoved(x, y)
    for _, window in ipairs(ActiveWindows) do
        window:HandleMouseMoved(x, y)
    end
end

-- ฟังก์ชันสำหรับการแจ้งเตือน
function DOGHUB:CreateNotification(config)
    local notification = {
        Title = config.Title or "Notification",
        Content = config.Content or "This is a notification",
        Duration = config.Duration or 5,
        Icon = config.Icon or "ℹ️",
        Actions = config.Actions or {},
        Position = {love.graphics.getWidth() - 320, 50},
        Size = {300, 100},
        StartTime = love.timer.getTime(),
        Visible = true,
        Animation = {Slide = 0, Fade = 1}
    }
    
    return notification
end

-- ระบบคีย์บอร์ด
function DOGHUB:HandleKeyPressed(key)
    for _, window in ipairs(ActiveWindows) do
        for _, element in ipairs(window.Elements) do
            if element.Type == "Input" and element.Focused then
                if key == "backspace" then
                    element.Text = element.Text:sub(1, -2)
                    element.Callback(element.Text)
                elseif key == "return" then
                    element.Focused = false
                    element.Callback(element.Text)
                end
            end
        end
    end
end

function DOGHUB:HandleTextInput(text)
    for _, window in ipairs(ActiveWindows) do
        for _, element in ipairs(window.Elements) do
            if element.Type == "Input" and element.Focused then
                element.Text = element.Text .. text
                element.Callback(element.Text)
            end
        end
    end
end

-- ฟังก์ชันโหลดและบันทึกการตั้งค่า
function DOGHUB:LoadConfiguration(name)
    local success, config = pcall(function()
        local file = io.open(name .. ".json", "r")
        if file then
            local content = file:read("*all")
            file:close()
            return love.data.decode("string", "base64", content)
        end
        return nil
    end)
    
    if success and config then
        return config
    end
    return {}
end

function DOGHUB:SaveConfiguration(name, config)
    local success = pcall(function()
        local encoded = love.data.encode("string", "base64", config)
        local file = io.open(name .. ".json", "w")
        if file then
            file:write(encoded)
            file:close()
            return true
        end
        return false
    end)
    
    return success
end

-- ฟังก์ชันตัวอย่างการใช้งาน
function DOGHUB:CreateExample()
    local window = self:CreateWindow({
        Name = "DOGHUB A Example",
        Size = {500, 600},
        ConfigurationSaving = {
            Enabled = true,
            FolderName = nil,
            FileName = "BigHub"
        },
        Discord = {
            Enabled = false,
            Invite = "noinvitelink",
            RememberJoins = true
        },
        KeySystem = false
    })
    
    local mainTab = window:CreateTab({
        Name = "Main",
        Icon = "🏠"
    })
    
    local settingsTab = window:CreateTab({
        Name = "Settings",
        Icon = "⚙️"
    })
    
    -- เพิ่มองค์ประกอบใน Main Tab
    mainTab:CreateLabel({
        Text = "Welcome to DOGHUB A!",
        Position = {10, 10}
    })
    
    mainTab:CreateParagraph({
        Title = "About DOGHUB A",
        Content = "DOGHUB A is a modern, beautiful UI library for Lua. Inspired by Rayfield, it provides a clean and intuitive interface for your applications.",
        Position = {10, 35}
    })
    
    mainTab:CreateSection({
        Name = "Controls",
        Position = {10, 110}
    })
    
    mainTab:CreateButton({
        Name = "Primary Button",
        Position = {10, 125},
        Style = "Primary",
        Callback = function()
            print("Primary button clicked!")
        end
    })
    
    mainTab:CreateButton({
        Name = "Success Button", 
        Position = {10, 170},
        Style = "Success",
        Callback = function()
            print("Success button clicked!")
        end
    })
    
    mainTab:CreateToggle({
        Name = "Enable Feature",
        Position = {10, 215},
        CurrentValue = false,
        Flag = "ToggleFlag",
        Callback = function(value)
            print("Toggle changed to:", value)
        end
    })
    
    mainTab:CreateSlider({
        Name = "Volume",
        Range = {0, 100},
        Increment = 1,
        Suffix = "%",
        CurrentValue = 50,
        Position = {10, 255},
        Flag = "VolumeSlider",
        Callback = function(value)
            print("Volume set to:", value .. "%")
        end
    })
    
    mainTab:CreateDropdown({
        Name = "Quality",
        Options = {"Low", "Medium", "High", "Ultra"},
        CurrentOption = "Medium",
        Position = {10, 310},
        Flag = "QualityDropdown",
        Callback = function(option)
            print("Quality changed to:", option)
        end
    })
    
    mainTab:CreateColorPicker({
        Name = "Theme Color",
        Color = {88, 101, 242},
        Position = {10, 355},
        Flag = "ThemeColor",
        Callback = function(color)
            print("Color changed to:", color[1], color[2], color[3])
        end
    })
    
    -- เพิ่มองค์ประกอบใน Settings Tab  
    settingsTab:CreateLabel({
        Text = "Application Settings",
        Position = {10, 10}
    })
    
    settingsTab:CreateSection({
        Name = "Appearance",
        Position = {10, 40}
    })
    
    settingsTab:CreateDropdown({
        Name = "Theme",
        Options = {"DarkBlue", "Purple", "Ocean"},
        CurrentOption = "DarkBlue",
        Position = {10, 55},
        Callback = function(theme)
            DOGHUB:SetTheme(theme)
            print("Theme changed to:", theme)
        end
    })
    
    settingsTab:CreateToggle({
        Name = "Enable Shadows",
        Position = {10, 100},
        CurrentValue = true,
        Callback = function(value)
            Config.ShadowEnabled = value
            print("Shadows:", value and "Enabled" or "Disabled")
        end
    })
    
    settingsTab:CreateSlider({
        Name = "Transparency",
        Range = {0.5, 1.0},
        Increment = 0.1,
        CurrentValue = 0.95,
        Position = {10, 145},
        Callback = function(value)
            Config.Transparency = value
            print("Transparency set to:", value)
        end
    })
    
    settingsTab:CreateSection({
        Name = "Performance",
        Position = {10, 200}
    })
    
    settingsTab:CreateToggle({
        Name = "Enable Animations",
        Position = {10, 215},
        CurrentValue = true,
        Callback = function(value)
            print("Animations:", value and "Enabled" or "Disabled")
        end
    })
    
    settingsTab:CreateSlider({
        Name = "Animation Speed",
        Range = {0.1, 1.0},
        Increment = 0.1,
        Suffix = "x",
        CurrentValue = 0.3,
        Position = {10, 260},
        Callback = function(value)
            Config.AnimationSpeed = value
            print("Animation speed set to:", value .. "x")
        end
    })
    
    return window
end

-- เริ่มต้นระบบ
function DOGHUB:Initialize()
    print("🐕 DOGHUB A v" .. self.Version .. " Initialized!")
    print("Created by " .. self.Author)
    print("Theme: " .. CurrentTheme)
    print("Ready to create amazing UIs!")
end

-- การรวมกับ LÖVE 2D
if love then
    local originalLoad = love.load or function() end
    local originalUpdate = love.update or function() end
    local originalDraw = love.draw or function() end
    local originalMousePressed = love.mousepressed or function() end
    local originalMouseReleased = love.mousereleased or function() end
    local originalMouseMoved = love.mousemoved or function() end
    local originalKeyPressed = love.keypressed or function() end
    local originalTextInput = love.textinput or function() end
    
    function love.load()
        DOGHUB:Initialize()
        originalLoad()
    end
    
    function love.update(dt)
        -- อัพเดทแอนิเมชัน
        for _, window in ipairs(ActiveWindows) do
            -- Animation updates here
        end
        originalUpdate(dt)
    end
    
    function love.draw()
        originalDraw()
        DOGHUB:DrawAll()
    end
    
    function love.mousepressed(x, y, button)
        DOGHUB:HandleMousePressed(x, y, button)
        originalMousePressed(x, y, button)
    end
    
    function love.mousereleased(x, y, button)
        DOGHUB:HandleMouseReleased(x, y, button)
        originalMouseReleased(x, y, button)
    end
    
    function love.mousemoved(x, y)
        DOGHUB:HandleMouseMoved(x, y)
        originalMouseMoved(x, y)
    end
    
    function love.keypressed(key)
        DOGHUB:HandleKeyPressed(key)
        originalKeyPressed(key)
    end
    
    function love.textinput(text)
        DOGHUB:HandleTextInput(text)
        originalTextInput(text)
    end
end

return DOGHUB
